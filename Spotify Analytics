/* 

For this project, I downloaded Spotify data from Kaggle.
https://www.kaggle.com/datasets/equinxx/spotify-top-50-songs-in-2021?select=spotify_top50_2021.csv
Then I created a table to insert Spotify data into.
Finally, I performed analytics on the data using SQL. 

*/

--Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

/* Then I inserted the Spotify Data .csv into the table.

Next, I explored the data using the following SQL. 
*/

--#1. What is the avg popularity, danceability, and energy by artist and track?
SELECT
artist_name
,track_name
,AVG(popularity)
,AVG(danceability)
,AVG(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

--#2. Who are the Top 10 artists are by popularity?
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10;

--#3. What artist released the longest song?
SELECT artist_name, track_name, MAX(duration_ms) / 1000 AS song_length_seconds
FROM BIT_DB.Spotifydata;

--#4. What's the average danceability for the 10 most popular songs?
SELECT AVG(danceability) AS average_danceability_top_10
FROM (
    SELECT danceability
    FROM BIT_DB.Spotifydata
    ORDER BY popularity DESC
    LIMIT 10
) AS top_10_songs;

--#5.Which songs have a positive mood but are acoustic in nature?
SELECT artist_name, track_name, valence, acousticness
FROM BIT_DB.Spotifydata
WHERE valence > 0.6 AND acousticness > 0.3;

--#6. Are songs with higher BPM (tempo) more popular?
SELECT artist_name, track_name, AVG(popularity) AS avg_popularity, 
CASE 
    WHEN tempo < 100 THEN 'Low BPM' 
    WHEN tempo BETWEEN 100 AND 140 THEN 'Medium BPM' 
    ELSE 'High BPM' 
END AS bpm_category
FROM BIT_DB.Spotifydata
GROUP BY bpm_category;

--#7. Calculate the average popularity for the artists in the Spotify data table. 
Then, for every artist with an average popularity of 90 or above, show their name, 
their average popularity, and label them as a “Top Star” (using CTE).

WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS avg_popularity
FROM SpotifyData s 
GROUP BY s.artist_name
)
 
SELECT  artist_name,
        avg_popularity,
        'Top Star' AS tag
FROM popularity_average_CTE
WHERE avg_popularity >= 90;
